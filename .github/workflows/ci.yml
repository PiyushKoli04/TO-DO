name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black

    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Run tests with pytest
      run: |
        pytest -v --cov=app --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true

    - name: Check for known security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check

  build-and-test:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create directory structure
      run: |
        mkdir -p templates

    - name: Test application startup
      run: |
        timeout 10s python app.py || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

    - name: Test API endpoints
      run: |
        python app.py &
        SERVER_PID=$!
        sleep 3
        
        # Test health endpoint
        curl -f http://localhost:5000/api/health || exit 1
        
        # Test todos endpoint
        curl -f http://localhost:5000/api/todos || exit 1
        
        # Test adding todo via API
        curl -X POST -H "Content-Type: application/json" \
             -d '{"title":"Test Todo","description":"API Test"}' \
             http://localhost:5000/api/todos || exit 1
        
        kill $SERVER_PID

  docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        cat > Dockerfile << EOF
        FROM python:3.11-slim
        
        WORKDIR /app
        
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        
        RUN mkdir -p templates
        
        EXPOSE 5000
        
        CMD ["python", "app.py"]
        EOF
        
        docker build -t flask-todo-app .

    - name: Test Docker container
      run: |
        docker run -d -p 5000:5000 --name test-container flask-todo-app
        sleep 5
        curl -f http://localhost:5000/api/health || exit 1
        docker stop test-container
        docker rm test-container

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Deployment completed successfully!"
        
    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests on staging..."
        echo "✅ Smoke tests passed!"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "✅ Production deployment completed!"
        
    - name: Post-deployment tests
      run: |
        echo "🔍 Running post-deployment verification..."
        echo "✅ All systems operational!"
